{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { jwtVerify } from 'jose'\n\nexport async function middleware(request: NextRequest) {\n  const token = request.cookies.get('auth_token')?.value\n\n  if (!token) {\n    return NextResponse.redirect(new URL('/login', request.url))\n  }\n\n  try {\n    // Verify the token\n    await jwtVerify(token, new TextEncoder().encode(process.env.JWT_SECRET))\n    return NextResponse.next()\n  } catch (error) {\n    // If the token is invalid, redirect to login\n    return NextResponse.redirect(new URL('/login', request.url))\n  }\n}\n\nexport const config = {\n  matcher: ['/dashboard/:path*', '/profile/:path*'], // Add any routes that should be protected\n}"],"names":[],"mappings":";;;;AAAA;;;;;;AAAA;;;AAIO,eAAe,WAAW,OAAoB;IACnD,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,eAAe;IAEjD,IAAI,CAAC,OAAO;QACV,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;IAEA,IAAI;QACF,mBAAmB;QACnB,MAAM,UAAU,OAAO,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU;QACtE,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,6CAA6C;QAC7C,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAqB;KAAkB;AACnD"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}