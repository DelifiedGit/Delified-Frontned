{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport bcryptjs from 'bcryptjs'\nimport jwt from 'jsonwebtoken'\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { email, fullName, userName, gender, dob, contactNumber, password, institution } = body\n\n    // 1. Validate the input\n    if (!email || !fullName || !userName || !gender || !dob || !contactNumber || !password || !institution) {\n      return NextResponse.json({ error: 'All fields are required' }, { status: 400 })\n    }\n\n    // 2. Check if the user already exists\n    const existingUser = await prisma.user.findUnique({ where: { email } })\n    if (existingUser) {\n      return NextResponse.json({ error: 'User already exists' }, { status: 409 })\n    }\n\n    // 3. Hash the password\n    const saltRounds = 10\n    const hashedPassword = await bcryptjs.hash(password, saltRounds)\n\n    // 4. Store the user in the database\n    const newUser = await prisma.user.create({\n      data: {\n        email,\n        fullName,\n        userName,\n        gender,\n        dateOfBirth: new Date(dob),\n        contactNumber,\n        password: hashedPassword,\n        institution\n      }\n    })\n\n    // 5. Generate a JWT token\n    const token = jwt.sign({ userId: newUser.id }, process.env.JWT_SECRET!, { expiresIn: '1d' })\n\n    // 6. Set the token in a secure HTTP-only cookie\n    const response = NextResponse.json({ message: 'User registered successfully' }, { status: 201 })\n    response.cookies.set('auth_token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 86400, // 1 day\n      path: '/',\n    })\n\n    return response\n  } catch (error) {\n    console.error('Signup error:', error)\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG;QAEzF,wBAAwB;QACxB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,YAAY,CAAC,aAAa;YACtG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,sCAAsC;QACtC,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QACrE,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,uBAAuB;QACvB,MAAM,aAAa;QACnB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,UAAU;QAErD,oCAAoC;QACpC,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACvC,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA,aAAa,IAAI,KAAK;gBACtB;gBACA,UAAU;gBACV;YACF;QACF;QAEA,0BAA0B;QAC1B,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,QAAQ,QAAQ,EAAE;QAAC,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAG;YAAE,WAAW;QAAK;QAE1F,gDAAgD;QAChD,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+B,GAAG;YAAE,QAAQ;QAAI;QAC9F,SAAS,OAAO,CAAC,GAAG,CAAC,cAAc,OAAO;YACxC,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ;YACR,MAAM;QACR;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}