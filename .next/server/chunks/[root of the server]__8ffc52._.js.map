{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport bcryptjs from 'bcryptjs'\nimport jwt from 'jsonwebtoken'\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const { email, password } = body\n\n    // 1. Validate the input\n    if (!email || !password) {\n      return NextResponse.json({ error: 'Email and password are required' }, { status: 400 })\n    }\n\n    // 2. Check if the user exists\n    const user = await prisma.user.findUnique({ where: { email } })\n    if (!user) {\n      return NextResponse.json({ error: 'Invalid email or password' }, { status: 401 })\n    }\n\n    // 3. Verify the password\n    const isPasswordValid = await bcryptjs.compare(password, user.password)\n    if (!isPasswordValid) {\n      return NextResponse.json({ error: 'Invalid email or password' }, { status: 401 })\n    }\n\n    // 4. Generate a JWT token\n    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET!, { expiresIn: '1d' })\n\n    // 5. Set the token in a secure HTTP-only cookie\n    const response = NextResponse.json({ message: 'Login successful' }, { status: 200 })\n    response.cookies.set('auth_token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 86400, // 1 day\n      path: '/',\n    })\n\n    return response\n  } catch (error) {\n    console.log('Login error:', error)\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,wBAAwB;QACxB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,8BAA8B;QAC9B,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAC7D,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,yBAAyB;QACzB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QACtE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,0BAA0B;QAC1B,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,QAAQ,KAAK,EAAE;QAAC,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAG;YAAE,WAAW;QAAK;QAEvF,gDAAgD;QAChD,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAmB,GAAG;YAAE,QAAQ;QAAI;QAClF,SAAS,OAAO,CAAC,GAAG,CAAC,cAAc,OAAO;YACxC,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ;YACR,MAAM;QACR;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}